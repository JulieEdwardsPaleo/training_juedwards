---
title: "Plotting"
format: html
---

# activate libraries, read in the data, take a look

```{r}
#| echo: false
#| message: false
#| warning: false
library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color palette


delta_visits_raw <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f")

## Check out column names

colnames(delta_visits_raw)

## Peak at each column and class
glimpse(delta_visits_raw)

## From when to when
range(delta_visits_raw$Date)

## Which time of day?
unique(delta_visits_raw$Time_of_Day)
```

## wrangle the data

```{r}
delta_visits <- delta_visits_raw %>% 
    janitor::clean_names()


visits_long <- delta_visits %>% 
    pivot_longer(cols = c(sm_boat, med_boat, lrg_boat, bank_angler, scientist, cars),
                 names_to = "visitor_type",
                 values_to = "quantity") %>%
    rename(restore_loc = eco_restore_approximate_location) %>% 
    select(-notes)

## Checking the outcome
head(visits_long)
```

# Calculate the daily visits by restore_loc, date, and visitor_type.

```{r}
#| message: false
#| warning: false
daily_visits_loc <- visits_long %>%
    group_by(restore_loc, date, visitor_type) %>% 
    summarise(daily_visits = sum(quantity))
    
head(daily_visits_loc)
```

# plotting first try

```{r}
## Option 1 - data and mapping called in the ggplot() function
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits))+
    geom_col()


## Option 2 - data called in ggplot function; mapping called in geom
ggplot(data = daily_visits_loc) +
    geom_col(aes(x = restore_loc, y = daily_visits))


## Option 3 - data and mapping called in geom
ggplot() +
    geom_col(data = daily_visits_loc,
             aes(x = restore_loc, y = daily_visits))
```

# different types of plots

```{r}
daily_visits_loc %>%
    separate(date, c("year", "month", "day"), sep = "-") %>%
    filter(daily_visits < 30,
           visitor_type %in% c("sm_boat", "med_boat", "lrg_boat")) %>%
    ggplot(aes(x = visitor_type, y = daily_visits)) +
    geom_boxplot()
```

# customizing plots

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = "blue"))+
    geom_col()
```

Notice that we tried to set the fill color of the plot inside the mapping aesthetic call. What we have done, behind the scenes, is create a column filled with the word “blue” in our data frame, and then mapped it to the fill aesthetic, which then chose the default fill color, salmon.

What we really wanted to do was just change the color of the bars. If we want do do that, we can call the color option in the geom_col() function, outside of the mapping aesthetics function call.

# fix this

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits))+
    geom_col(fill = "blue")
```

# adding more information to the plot

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()
```

# clean the plot up

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    theme_bw()
```

# make our own theme, chaning the legend position and the x ticks, and fontsize (base_size)

```{r}
my_theme <- theme_bw(base_size = 10) +
    theme(legend.position = "bottom",
          axis.ticks.y = element_blank())

# plotting
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during study period")+
    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+
    coord_flip()+ # this is just aesthetic flip, the location is considered the 'x-axis' still in the set-up
  # a little confusing 
    my_theme
```

# reordering so the location with the most visits is on top

add a column of the *total* visits per location so sum up the daily visits across all visitor type after grouping by location

```{r}
daily_visits_totals <- daily_visits_loc %>% 
    group_by(restore_loc) %>%
    mutate(n = sum(daily_visits)) %>% 
    ungroup()

head(daily_visits_totals)
```

# now plot, adding the fct_reorder() function to the x input of aes()

```{r}
ggplot(data = daily_visits_totals,
       aes(x = fct_reorder(restore_loc, n), y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during study period")+
    coord_flip()+
    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+
    my_theme
```

Most visitors at Prospect, no love for Sherman Island

Ascending is the default in the fct_reorder(restore_loc, n), to sort by descending, replace n with  desc(n)

# Changing the colors

using the viridis package, adding     scale_fill_viridis_d()+

```{r}
ggplot(data = daily_visits_totals,
       aes(x = fct_reorder(restore_loc, desc(n)), y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    scale_fill_viridis_d()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during study period")+
    coord_flip()+
    scale_y_continuous(breaks = seq(0,120, 20), expand = c(0,0))+
    my_theme
```

What about custom color palette?

